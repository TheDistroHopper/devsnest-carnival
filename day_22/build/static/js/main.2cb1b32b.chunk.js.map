{"version":3,"sources":["components/Meme.js","App.js","index.js"],"names":["Meme","template","onClick","style","width","src","url","alt","name","id","App","useState","templates","setTemplates","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","useEffect","fetch","then","x","json","response","data","memes","textAlign","srcset","onSubmit","e","a","preventDefault","params","template_id","text0","text1","username","password","obj","Object","entries","map","key","value","join","placeholder","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAEaA,EAAO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OACE,qBACEC,MAAO,CAAEC,MAAO,KAEhBC,IAAKJ,EAASK,IACdC,IAAKN,EAASO,KACdN,QAASA,GAHJD,EAASQ,KCmFLC,MAhFf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,MAF5B,mBAENV,EAFM,KAEIa,EAFJ,OAGiBH,mBAAS,IAH1B,mBAGNI,EAHM,KAGGC,EAHH,OAIuBL,mBAAS,IAJhC,mBAINM,EAJM,KAIMC,EAJN,OAKWP,mBAAS,MALpB,mBAKNQ,EALM,KAKAC,EALA,KAab,OANAC,qBAAU,WACRC,MAAM,qCAAqCC,MAAK,SAACC,GAAD,OAC9CA,EAAEC,OAAOF,MAAK,SAACG,GAAD,OAAcb,EAAaa,EAASC,KAAKC,eAExD,IAECT,EAEA,qBAAKhB,MAAO,CAAE0B,UAAW,UAAzB,SACE,qBAAKxB,IAAKc,EAAMZ,IAAI,YAAYuB,OAAO,OAM3C,sBAAK3B,MAAO,CAAE0B,UAAW,UAAzB,UACG5B,GACC,uBACE8B,SAAQ,uCAAE,WAAOC,GAAP,mBAAAC,EAAA,6DACRD,EAAEE,iBACIC,EAAS,CACbC,YAAanC,EAASQ,GACtB4B,MAAOtB,EACPuB,MAAOrB,EACPsB,SAAU,WACVC,SAAU,mBAPJ,SASelB,MAAM,wCAAD,QAvCZmB,EAyCZN,EAvCP,IADQO,OAAOC,QAAQF,GAAKG,KAAI,mCAAEC,EAAF,KAAOC,EAAP,qBAAqBD,EAArB,YAA4BC,MAC/CC,KAAK,QA4BP,cASFrB,EATE,gBAcWA,EAASD,OAdpB,OAcFA,EAdE,OAeRL,EAAQK,EAAKE,KAAKrB,KAfV,iCA9BO,IAACmC,IA8BR,OAAF,sDADV,UAmBE,cAAC,EAAD,CAAMxC,SAAUA,IAChB,uBACE+C,YAAY,WACZF,MAAO/B,EACPkC,SAAU,SAACjB,GACThB,EAAWgB,EAAEkB,OAAOJ,UAGxB,uBACEE,YAAY,cACZF,MAAO7B,EACPgC,SAAU,SAACjB,GACTd,EAAcc,EAAEkB,OAAOJ,UAG3B,wBAAQK,KAAK,SAAb,6BAGFlD,GACA,qCACE,wDACCW,EAAUgC,KAAI,SAAC3C,GACd,OACE,cAAC,EAAD,CACEA,SAAUA,EACVC,QAAS,WACPY,EAAYb,gBC1E9BmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2cb1b32b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Meme = ({ template, onClick }) => {\n  return (\n    <img\n      style={{ width: 300 }}\n      key={template.id}\n      src={template.url}\n      alt={template.name}\n      onClick={onClick}\n    />\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\n      x.json().then((response) => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <img src={meme} alt=\"your meme\" srcset=\"\" />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {template && (\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"xzk03017\",\n              password: \"hffbWbik3fhCpGV\",\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const json = await response.json();\n            setMeme(json.data.url);\n          }}\n        >\n          <Meme template={template} />\n          <input\n            placeholder=\"Top Text\"\n            value={topText}\n            onChange={(e) => {\n              setTopText(e.target.value);\n            }}\n          />\n          <input\n            placeholder=\"Bottom Text\"\n            value={bottomText}\n            onChange={(e) => {\n              setBottomText(e.target.value);\n            }}\n          />\n          <button type=\"submit\">Create meme</button>\n        </form>\n      )}\n      {!template && (\n        <>\n          <h1>Select a meme template</h1>\n          {templates.map((template) => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}